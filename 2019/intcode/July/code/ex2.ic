(bytes ret 1)

(defn div (x y) (cp)
  (* 0 0 $ret)
(loop
  (< x y cp)
    (1j cp ~break)
  (- x y x)
  (+= $ret 1)
))

(defn mod (x y) ()
(loop
  (< x y $ret)
    (1j $ret ~break)
  (- x y x)
) (mv x $ret))

(defn puts (ptr) (ch)
  (+ 0 ptr &ref)
(loop
  (+ 0 ^ref ch)
    (0j ch ~break)
  (putc ch)
  (+= &ref 1)
))

(bytes sBuff 16)
(bytes rBuff 16)

(defn show (int) ()
  (mv !rBuff &r0)
  (mv !sBuff &r2)
(loop
  (mod int 10)
  (+ 48 $ret ^r0)
  (div int 10)
  (mv $ret int)
    (0j int ~break)
  (+= &r0 1)
) (mv &r0 &r1)
(loop
  (mv ^r1 ^r2)
  (= &r1 !sBuff $ret)
    (1j $ret ~break)
  (-= &r1 1)
  (+= &r2 1)
) (mv !sBuff $ret)
)

(bytes FB "FizzBuzz\n")
(bytes F "Fizz\n")
(bytes B "Buzz\n")

(defn main () (a b c i)
  (mv 0 i) (mv 0 sum)
(loop
  (+= i 1)
  (< i 100 c)
    (0j c ~break)
  (mod i 3) (mv $ret a)
  (mod i 5) (mv $ret b)
  (+ a b c) (= 0 c c)
  (if c)

) (show sum)
  (puts $ret)
)
